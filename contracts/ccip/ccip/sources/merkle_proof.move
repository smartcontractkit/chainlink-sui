module ccip::merkle_proof {
    use sui::hash;

    const E_VECTOR_LENGTH_MISMATCH: u64 = 1;

    const LEAF_DOMAIN_SEPARATOR: vector<u8> = x"0000000000000000000000000000000000000000000000000000000000000000";
    const INTERNAL_DOMAIN_SEPARATOR: vector<u8> = x"0000000000000000000000000000000000000000000000000000000000000001";

    public fun leaf_domain_separator(): vector<u8> {
        LEAF_DOMAIN_SEPARATOR
    }

    public fun vector_u8_gt(a: &vector<u8>, b: &vector<u8>): bool {
        let len = vector::length(a);
        assert!(
            len == vector::length(b), E_VECTOR_LENGTH_MISMATCH
        );

        let mut i = 0;
        // compare each byte until not equal
        while (i < len) {
            let byte_a = *vector::borrow(a, i);
            let byte_b = *vector::borrow(b, i);
            if (byte_a > byte_b) {
                return true
            } else if (byte_a < byte_b) {
                return false
            };
            i = i + 1;
        };

        // vectors are equal, a == b
        false
    }

    public fun merkle_root_simple(leaf: vector<u8>, proofs: vector<vector<u8>>): vector<u8> {
        vector::fold!(proofs, leaf, |acc, proof| hash_pair(acc, proof))
    }

    // preserve this function in case we need to bring it back for multi-proof verification
    // public fun merkle_root(
    //     leaves: &vector<vector<u8>>,
    //     proofs: &vector<vector<u8>>,
    //     proof_flag_bits: u256
    // ): vector<u8> {
    //     let leaves_len = vector::length(leaves);
    //     let proofs_len = vector::length(proofs);
    //
    //     assert!(leaves_len > 0, E_LEAVES_CANNOT_BE_EMPTY);
    //     assert!(
    //         leaves_len <= (MAX_NUM_HASHES + 1) && proofs_len <= (MAX_NUM_HASHES + 1),
    //         E_INVALID_PROOF
    //     );
    //
    //     let total_hashes = leaves_len + proofs_len - 1;
    //     assert!(total_hashes <= MAX_NUM_HASHES, E_INVALID_PROOF);
    //     assert!(total_hashes > 0, E_SINGLE_LEAF);
    //
    //     let mut hashes = vector[];
    //     let mut leaf_pos = 0u64;
    //     let mut hash_pos = 0u64;
    //     let mut proof_pos = 0u64;
    //     let mut i = 0u64;
    //
    //     while (i < total_hashes) {
    //         let mut a;
    //         // total_hashes <= MAX_NUM_HASHES so i < MAX_NUM_HASHES and fit inside a u8.
    //         let current_bit = 1 << (i as u8);
    //         if ((proof_flag_bits & current_bit) == current_bit) {
    //             if (leaf_pos < leaves_len) {
    //                 a = *vector::borrow(leaves, leaf_pos);
    //                 leaf_pos = leaf_pos + 1;
    //             } else {
    //                 assert!(
    //                     hash_pos < vector::length(&hashes),
    //                     E_INVALID_PROOF
    //                 );
    //                 a = *vector::borrow(&hashes, hash_pos);
    //                 hash_pos = hash_pos + 1;
    //             }
    //         } else {
    //             assert!(proof_pos < proofs_len, E_INVALID_PROOF);
    //             a = *vector::borrow(proofs, proof_pos);
    //             proof_pos = proof_pos + 1;
    //         };
    //
    //         let mut b;
    //         if (leaf_pos < leaves_len) {
    //             b = *vector::borrow(leaves, leaf_pos);
    //             leaf_pos = leaf_pos + 1;
    //         } else {
    //             assert!(
    //                 hash_pos < vector::length(&hashes),
    //                 E_INVALID_PROOF
    //             );
    //             b = *vector::borrow(&hashes, hash_pos);
    //             hash_pos = hash_pos + 1;
    //         };
    //
    //         assert!(hash_pos <= i, E_INVALID_PROOF);
    //
    //         let hash = hash_pair(a, b);
    //         vector::push_back(&mut hashes, hash);
    //         i = i + 1;
    //     };
    //
    //     assert!(
    //         hash_pos == (total_hashes - 1)
    //             && leaf_pos == leaves_len
    //             && proof_pos == proofs_len,
    //         E_INVALID_PROOF
    //     );
    //
    //     *vector::borrow(&hashes, total_hashes - 1)
    // }

    fun hash_internal_node(left: vector<u8>, right: vector<u8>): vector<u8> {
        let mut data = INTERNAL_DOMAIN_SEPARATOR;
        vector::append(&mut data, left);
        vector::append(&mut data, right);
        hash::keccak256(&data)
    }

    /// Hashes a pair of byte vectors, ordering them lexographically
    fun hash_pair(a: vector<u8>, b: vector<u8>): vector<u8> {
        if (!vector_u8_gt(&a, &b)) {
            hash_internal_node(a, b)
        } else {
            hash_internal_node(b, a)
        }
    }
}

#[test_only]
module ccip::merkle_proof_test {
    use ccip::merkle_proof;

    #[test]
    #[expected_failure(abort_code = merkle_proof::E_VECTOR_LENGTH_MISMATCH)]
    public fun vector_u8_gt_failed() {
        let a = vector[1, 2, 3];
        let b = vector[1, 2];
        merkle_proof::vector_u8_gt(&a, &b);
    }

    #[test]
    public fun vector_u8_gt() {
        let a = vector[1, 2, 5];
        let b = vector[1, 2, 4];
        assert!(merkle_proof::vector_u8_gt(&a, &b));
    }

    #[test]
    public fun merkle_root_simple_1() {
        let leaf = vector[
            0xa2, 0x0c, 0x02, 0x44, 0xaf, 0x79, 0x69, 0x7a,
            0x4e, 0xf4, 0xe2, 0x37, 0x8c, 0x9d, 0x5d, 0x14,
            0xcb, 0xd4, 0x9d, 0xda, 0xb3, 0x42, 0x7b, 0x12,
            0x59, 0x4c, 0x7c, 0xfa, 0x67, 0xa7, 0xf2, 0x40
        ];
        let proofs = vector[
            vector[0x7b, 0x43, 0xf2, 0xa9, 0x15, 0x8e, 0xd1, 0xc6, 0x2f, 0x90, 0x4d, 0x7e, 0x8b, 0x19, 0x5a, 0x3c, 0xb4, 0x67, 0xe5, 0x82, 0x1d, 0x9f, 0x46, 0xa0, 0xc8, 0x73, 0xb2, 0x5d, 0xf8, 0x31, 0xe9, 0x94],
            vector[0x2c, 0x8f, 0xd5, 0x61, 0xa4, 0x37, 0xb9, 0xe0, 0x4a, 0x1f, 0x85, 0xc2, 0x6d, 0x93, 0x0b, 0x7e, 0xf1, 0x48, 0xac, 0x25, 0x9b, 0x3e, 0x70, 0xd4, 0x16, 0x8a, 0xc7, 0x5f, 0xb3, 0x09, 0xe2, 0x4d],
            vector[0x53, 0x1a, 0xb8, 0xc4, 0x6f, 0x92, 0x0d, 0x75, 0xe3, 0x4c, 0x9a, 0x27, 0x85, 0xf6, 0x3b, 0x14, 0xd0, 0x8e, 0x59, 0xa2, 0x7c, 0x1f, 0xb5, 0x43, 0xec, 0x96, 0x2d, 0x80, 0x5b, 0xf4, 0x3a, 0x17],
            vector[0x9c, 0x25, 0xe7, 0x4f, 0xb1, 0x38, 0xd6, 0x0a, 0x72, 0xc9, 0x5e, 0x83, 0x1b, 0xf0, 0x47, 0xae, 0x95, 0x2c, 0x6d, 0x13, 0x8f, 0x54, 0xba, 0x31, 0x7e, 0xc5, 0x09, 0xd2, 0x4a, 0x86, 0xf3, 0x5b],
            vector[0x41, 0xf8, 0x2e, 0xa7, 0x63, 0xb9, 0x05, 0xdc, 0x8a, 0x34, 0x7f, 0xc1, 0x5b, 0x92, 0x0e, 0xd6, 0x48, 0xb3, 0x1a, 0xe5, 0x7c, 0x29, 0x84, 0x6f, 0xd0, 0x3b, 0xa5, 0x12, 0x9e, 0x57, 0xc8, 0x3f],
            vector[0x84, 0x2b, 0xf6, 0x0d, 0x95, 0x3c, 0xae, 0x71, 0x1f, 0xc7, 0x58, 0xb2, 0x49, 0xe0, 0x26, 0x8d, 0xa3, 0x5f, 0x91, 0x38, 0xd4, 0x0c, 0x7a, 0xe2, 0x6b, 0xf5, 0x13, 0x8c, 0x47, 0xb9, 0x25, 0xd0],
            vector[0x16, 0xc9, 0x4f, 0xb3, 0x2a, 0x85, 0x7d, 0x31, 0xe8, 0x5c, 0x94, 0x0b, 0x73, 0xdf, 0x42, 0xa6, 0x1e, 0x87, 0x3c, 0xf5, 0x69, 0xb0, 0x2d, 0x95, 0x4a, 0x8e, 0x61, 0xc7, 0x03, 0xd8, 0x5f, 0xa2],
            vector[0x6d, 0x35, 0x9a, 0x0c, 0xf4, 0x7b, 0x23, 0x8e, 0x51, 0xb7, 0x2f, 0xd9, 0x45, 0xac, 0x68, 0x13, 0xe0, 0x97, 0x4c, 0x82, 0x1b, 0xd5, 0x3a, 0xf6, 0x8f, 0x27, 0xb9, 0x50, 0xe4, 0x7c, 0x15, 0x9d],
            vector[0xa8, 0x54, 0x1c, 0xf7, 0x3e, 0x92, 0x6b, 0x0d, 0xc5, 0x78, 0x2a, 0xb3, 0x8f, 0x41, 0xe6, 0x59, 0x17, 0xd0, 0x84, 0x3b, 0xac, 0x25, 0x9e, 0x70, 0xf3, 0x4c, 0x8d, 0x16, 0xb5, 0x2e, 0x97, 0x51],
            vector[0x3f, 0xd2, 0x8a, 0x51, 0xc7, 0x0e, 0x94, 0x2b, 0x76, 0xf8, 0x1d, 0xa5, 0x4c, 0x83, 0x19, 0xe0, 0xb2, 0x6f, 0x37, 0xc9, 0x05, 0x8e, 0x40, 0xd7, 0x9a, 0x13, 0xf5, 0x2c, 0x7b, 0x84, 0x6e, 0x0a],
            vector[0x91, 0x47, 0xc3, 0x8e, 0x25, 0xba, 0x0f, 0x6d, 0x34, 0x9c, 0x52, 0xe8, 0x17, 0xd5, 0x7a, 0x43, 0xb6, 0x1f, 0x85, 0x2c, 0xa9, 0x60, 0xf4, 0x3b, 0x7e, 0x95, 0x0d, 0xc8, 0x51, 0x2a, 0xb3, 0x4f],
            vector[0x5e, 0x03, 0xd9, 0x72, 0x4a, 0xb1, 0x86, 0x1f, 0xc5, 0x2d, 0x97, 0x0e, 0x63, 0xfa, 0x38, 0x85, 0x4c, 0xb2, 0x7d, 0x19, 0xe6, 0x50, 0xa8, 0x23, 0x9f, 0x14, 0xd7, 0x6b, 0x82, 0x3c, 0xf5, 0x0a],
            vector[0xc7, 0x8e, 0x24, 0xb9, 0x51, 0xf6, 0x3a, 0x82, 0x0d, 0x75, 0x1c, 0xe4, 0x9b, 0x37, 0xa0, 0x5f, 0xd2, 0x68, 0x13, 0xf9, 0x4c, 0x85, 0x2b, 0xae, 0x06, 0x7d, 0x31, 0x9a, 0x4e, 0xc5, 0x8f, 0x27],
            vector[0x2a, 0xd5, 0x7f, 0x13, 0x8c, 0x46, 0xb0, 0x59, 0xe2, 0x9a, 0x31, 0xc7, 0x04, 0x6d, 0xf8, 0x25, 0x8e, 0x3b, 0xa4, 0x72, 0x1f, 0xd9, 0x50, 0x97, 0x3e, 0x86, 0x0c, 0xb5, 0x4a, 0x1d, 0xe7, 0x63],
            vector[0x95, 0x1c, 0xe8, 0x42, 0x7b, 0xd3, 0x09, 0xf6, 0x5a, 0x83, 0x2d, 0xb4, 0x6f, 0x17, 0xc0, 0x8e, 0x35, 0x9c, 0x4f, 0xa1, 0x26, 0xd8, 0x70, 0x3b, 0x85, 0x1e, 0xf7, 0x62, 0x9d, 0x04, 0xb8, 0x53],
            vector[0x4e, 0xa7, 0x31, 0xc8, 0x5f, 0x92, 0x0b, 0x74, 0xd6, 0x1e, 0x8a, 0x43, 0xb5, 0x2c, 0xf9, 0x60, 0x87, 0x3d, 0xe5, 0x19, 0x72, 0xab, 0x24, 0x9c, 0x53, 0x0f, 0xd1, 0x48, 0xb6, 0x7a, 0x35, 0xec],
            vector[0xb3, 0x29, 0x8f, 0x56, 0xe0, 0x47, 0xc1, 0x3a, 0x82, 0x0d, 0x75, 0x1c, 0xe4, 0x9b, 0x37, 0xa0, 0x5f, 0xd2, 0x68, 0x13, 0xf9, 0x4c, 0x85, 0x2b, 0xae, 0x06, 0x7d, 0x31, 0x9a, 0x4e, 0xc5, 0x8f],
            vector[0x7a, 0xf4, 0x2d, 0x91, 0x38, 0xc5, 0x0e, 0x67, 0xb2, 0x49, 0x83, 0x1c, 0xd5, 0x6a, 0x04, 0xef, 0x95, 0x2c, 0x7b, 0x13, 0x8f, 0x54, 0xba, 0x31, 0x7e, 0xc5, 0x09, 0xd2, 0x4a, 0x86, 0xf3, 0x5b],
            vector[0x51, 0xe8, 0x72, 0x3f, 0x9c, 0x04, 0xba, 0x25, 0x6d, 0xf1, 0x38, 0x8e, 0x47, 0xa0, 0x13, 0xc9, 0x5e, 0x82, 0x1b, 0xd4, 0x7f, 0x36, 0x9a, 0x0c, 0xe5, 0x28, 0xb3, 0x4f, 0x97, 0x61, 0x0d, 0x8a],
            vector[0xc4, 0x3b, 0x95, 0x0d, 0x72, 0xf8, 0x1e, 0x86, 0x4a, 0xb3, 0x27, 0xd9, 0x5c, 0x01, 0xe4, 0x7b, 0x93, 0x2f, 0xa8, 0x56, 0x0c, 0xd1, 0x48, 0xbf, 0x35, 0x9e, 0x67, 0x12, 0x8d, 0x4c, 0xa5, 0x3e],
            vector[0x08, 0xd4, 0x6b, 0xa2, 0x3f, 0x95, 0x1c, 0xe8, 0x42, 0x7b, 0xd3, 0x09, 0xf6, 0x5a, 0x83, 0x2d, 0xb4, 0x6f, 0x17, 0xc0, 0x8e, 0x35, 0x9c, 0x4f, 0xa1, 0x26, 0xd8, 0x70, 0x3b, 0x85, 0x1e, 0xf7],
            vector[0x83, 0x2a, 0xf5, 0x4c, 0x97, 0x61, 0x0d, 0xb8, 0x35, 0x9e, 0x67, 0x12, 0x8d, 0x4c, 0xa5, 0x3e, 0xf0, 0x79, 0x21, 0xda, 0x56, 0x8f, 0x37, 0xc2, 0x0b, 0x74, 0x1d, 0xe6, 0x92, 0x4f, 0xa8, 0x13],
            vector[0x1f, 0xc7, 0x58, 0xb2, 0x49, 0xe0, 0x26, 0x8d, 0xa3, 0x5f, 0x91, 0x38, 0xd4, 0x0c, 0x7a, 0xe2, 0x6b, 0xf5, 0x13, 0x8c, 0x47, 0xb9, 0x25, 0xd0, 0x84, 0x2b, 0xf6, 0x0d, 0x95, 0x3c, 0xae, 0x71],
            vector[0x94, 0x3d, 0x86, 0x0f, 0x52, 0xca, 0x71, 0x1b, 0xe4, 0x59, 0xa2, 0x27, 0xd0, 0x8b, 0x35, 0xfc, 0x47, 0x9e, 0x63, 0x1a, 0xb5, 0x2c, 0x78, 0xd1, 0x0e, 0x96, 0x4f, 0xa3, 0x5b, 0x82, 0x19, 0xe7],
            vector[0x2e, 0xb7, 0x41, 0xd8, 0x0f, 0x96, 0x53, 0xac, 0x25, 0x7e, 0x14, 0x8b, 0xf2, 0x39, 0xc0, 0x6d, 0xa5, 0x1c, 0x84, 0x3b, 0xe6, 0x5f, 0x92, 0x07, 0xd3, 0x4a, 0xb1, 0x68, 0x2f, 0x95, 0x0c, 0x73],
            vector[0xa9, 0x50, 0x17, 0xe4, 0x6b, 0x23, 0x8c, 0xf5, 0x3a, 0xd1, 0x78, 0x42, 0x9b, 0x0e, 0x85, 0x5c, 0xb3, 0x2a, 0xf7, 0x61, 0x0d, 0x94, 0x3b, 0xc8, 0x56, 0x1f, 0xd2, 0x79, 0x45, 0xac, 0x83, 0x2e],
            vector[0x75, 0x1c, 0xe4, 0x9b, 0x37, 0xa0, 0x5f, 0xd2, 0x68, 0x13, 0xf9, 0x4c, 0x85, 0x2b, 0xae, 0x06, 0x7d, 0x31, 0x9a, 0x4e, 0xc5, 0x8f, 0x27, 0xb3, 0x29, 0x8f, 0x56, 0xe0, 0x47, 0xc1, 0x3a, 0x82],
            vector[0x4d, 0x85, 0x3c, 0xf6, 0x1a, 0xb2, 0x7e, 0x09, 0xd4, 0x5b, 0x83, 0x2c, 0x97, 0x0e, 0x65, 0xac, 0x31, 0xf8, 0x4a, 0xb5, 0x6d, 0x23, 0x89, 0x40, 0xe7, 0x1c, 0xd6, 0x92, 0x58, 0x0f, 0xa4, 0x7b],
            vector[0xb6, 0x2f, 0x98, 0x51, 0xc4, 0x0a, 0x73, 0xe9, 0x1d, 0x86, 0x3f, 0xb5, 0x4c, 0x27, 0x90, 0x5e, 0xd8, 0x12, 0x7f, 0xa3, 0x49, 0xe0, 0x26, 0x8d, 0xb7, 0x54, 0x0c, 0x95, 0x3e, 0x71, 0xf8, 0x2a],
            vector[0x39, 0xe2, 0x57, 0xac, 0x84, 0x1b, 0xd5, 0x6f, 0x03, 0x9a, 0x42, 0xc8, 0x15, 0x7e, 0xb0, 0x29, 0xf4, 0x8d, 0x36, 0xa1, 0x5c, 0x02, 0xeb, 0x74, 0x1d, 0x86, 0x3f, 0xb5, 0x4c, 0x27, 0x90, 0x5e],
            vector[0x0c, 0x95, 0x3e, 0x71, 0xf8, 0x2a, 0xb6, 0x2f, 0x98, 0x51, 0xc4, 0x0a, 0x73, 0xe9, 0x1d, 0x86, 0x3f, 0xb5, 0x4c, 0x27, 0x90, 0x5e, 0xd8, 0x12, 0x7f, 0xa3, 0x49, 0xe0, 0x26, 0x8d, 0xb7, 0x54],
            vector[0x65, 0xac, 0x31, 0xf8, 0x4a, 0xb5, 0x6d, 0x23, 0x89, 0x40, 0xe7, 0x1c, 0xd6, 0x92, 0x58, 0x0f, 0xa4, 0x7b, 0x4d, 0x85, 0x3c, 0xf6, 0x1a, 0xb2, 0x7e, 0x09, 0xd4, 0x5b, 0x83, 0x2c, 0x97, 0x0e],
            vector[0xe2, 0x59, 0xac, 0x84, 0x1b, 0xd5, 0x6f, 0x03, 0x9a, 0x42, 0xc8, 0x15, 0x7e, 0xb0, 0x29, 0xf4, 0x8d, 0x36, 0xa1, 0x5c, 0x02, 0xeb, 0x74, 0x1d, 0x86, 0x3f, 0xb5, 0x4c, 0x27, 0x90, 0x5e, 0x39]
        ];
        let res: vector<u8> = merkle_proof::merkle_root_simple(leaf, proofs);

        let hash_bytes = vector[
            0xd2, 0xda, 0xa6, 0x1e, 0xdc, 0x49, 0x95, 0xfd,
            0xed, 0x82, 0x9d, 0xb9, 0x7c, 0x82, 0x3b, 0x9b,
            0x66, 0x3d, 0x17, 0xbc, 0x2a, 0x6e, 0x8e, 0x2f,
            0x68, 0x03, 0x3f, 0xe1, 0x15, 0xb1, 0x49, 0xa7
        ];
        assert!(res == hash_bytes);
    }

    #[test]
    public fun merkle_root_simple_2() {
        let leaf = vector[
            0x8b, 0xea, 0xb0, 0x02, 0x97, 0xb9, 0x4b, 0xf0,
            0x79, 0xfc, 0xd5, 0x89, 0x3b, 0x0a, 0x33, 0xeb,
            0xf6, 0xb0, 0xce, 0x86, 0x2c, 0xd0, 0x6b, 0xe0,
            0x7c, 0x87, 0xd3, 0xc6, 0x3e, 0x1c, 0x4a, 0xcf
        ];

        let proofs = vector[
            vector[0x1f, 0xa3, 0xb2, 0xc9, 0x45, 0x8e, 0xd1, 0x76, 0x2f, 0x90, 0x4d, 0xae, 0x8b, 0x19, 0x5a, 0x3c, 0xb4, 0x67, 0xe5, 0x82, 0x1d, 0x9f, 0x46, 0xa0, 0xc8, 0x73, 0xb2, 0x5d, 0xf8, 0x31, 0xe9, 0x94],
            vector[0x2c, 0x8f, 0xd5, 0x61, 0xa4, 0x37, 0xb9, 0xe0, 0x4a, 0x1f, 0x85, 0xc2, 0x6d, 0x93, 0x0b, 0x7e, 0xf1, 0x48, 0xac, 0x25, 0x9b, 0x3e, 0x70, 0xd4, 0x16, 0x8a, 0xc7, 0x5f, 0xb3, 0x09, 0xe2, 0x4d],
            vector[0x53, 0x1a, 0xb8, 0xc4, 0x6f, 0x92, 0x0d, 0x75, 0xe3, 0x4c, 0x9a, 0x27, 0x85, 0xf6, 0x3b, 0x14, 0xd0, 0x8e, 0x59, 0xa2, 0x7c, 0x1f, 0xb5, 0x43, 0xec, 0x96, 0x2d, 0x80, 0x5b, 0xf4, 0x3a, 0x17],
            vector[0x9c, 0x25, 0xe7, 0x4f, 0xb1, 0x38, 0xd6, 0x0a, 0x72, 0xc9, 0x5e, 0x83, 0x1b, 0xf0, 0x47, 0xae, 0x95, 0x2c, 0x6d, 0x13, 0x8f, 0x54, 0xba, 0x31, 0x7e, 0xc5, 0x09, 0xd2, 0x4a, 0x86, 0xf3, 0x5b],
            vector[0x41, 0xf8, 0x2e, 0xa7, 0x63, 0xb9, 0x05, 0xdc, 0x8a, 0x34, 0x7f, 0xc1, 0x5b, 0x92, 0x0e, 0xd6, 0x48, 0xb3, 0x1a, 0xe5, 0x7c, 0x29, 0x84, 0x6f, 0xd0, 0x3b, 0xa5, 0x12, 0x9e, 0x57, 0xc8, 0x3f],
            vector[0x84, 0x2b, 0xf6, 0x0d, 0x95, 0x3c, 0xae, 0x71, 0x1f, 0xc7, 0x58, 0xb2, 0x49, 0xe0, 0x26, 0x8d, 0xa3, 0x5f, 0x91, 0x38, 0xd4, 0x0c, 0x7a, 0xe2, 0x6b, 0xf5, 0x13, 0x8c, 0x47, 0xb9, 0x25, 0xd0],
            vector[0x16, 0xc9, 0x4f, 0xb3, 0x2a, 0x85, 0x7d, 0x31, 0xe8, 0x5c, 0x94, 0x0b, 0x73, 0xdf, 0x42, 0xa6, 0x1e, 0x87, 0x3c, 0xf5, 0x69, 0xb0, 0x2d, 0x95, 0x4a, 0x8e, 0x61, 0xc7, 0x03, 0xd8, 0x5f, 0xa2],
            vector[0x6d, 0x35, 0x9a, 0x0c, 0xf4, 0x7b, 0x23, 0x8e, 0x51, 0xb7, 0x2f, 0xd9, 0x45, 0xac, 0x68, 0x13, 0xe0, 0x97, 0x4c, 0x82, 0x1b, 0xd5, 0x3a, 0xf6, 0x8f, 0x27, 0xb9, 0x50, 0xe4, 0x7c, 0x15, 0x9d],
            vector[0xa8, 0x54, 0x1c, 0xf7, 0x3e, 0x92, 0x6b, 0x0d, 0xc5, 0x78, 0x2a, 0xb3, 0x8f, 0x41, 0xe6, 0x59, 0x17, 0xd0, 0x84, 0x3b, 0xac, 0x25, 0x9e, 0x70, 0xf3, 0x4c, 0x8d, 0x16, 0xb5, 0x2e, 0x97, 0x51],
            vector[0x3f, 0xd2, 0x8a, 0x51, 0xc7, 0x0e, 0x94, 0x2b, 0x76, 0xf8, 0x1d, 0xa5, 0x4c, 0x83, 0x19, 0xe0, 0xb2, 0x6f, 0x37, 0xc9, 0x05, 0x8e, 0x40, 0xd7, 0x9a, 0x13, 0xf5, 0x2c, 0x7b, 0x84, 0x6e, 0x0a],
            vector[0x91, 0x47, 0xc3, 0x8e, 0x25, 0xba, 0x0f, 0x6d, 0x34, 0x9c, 0x52, 0xe8, 0x17, 0xd5, 0x7a, 0x43, 0xb6, 0x1f, 0x85, 0x2c, 0xa9, 0x60, 0xf4, 0x3b, 0x7e, 0x95, 0x0d, 0xc8, 0x51, 0x2a, 0xb3, 0x4f],
            vector[0x5e, 0x03, 0xd9, 0x72, 0x4a, 0xb1, 0x86, 0x1f, 0xc5, 0x2d, 0x97, 0x0e, 0x63, 0xfa, 0x38, 0x85, 0x4c, 0xb2, 0x7d, 0x19, 0xe6, 0x50, 0xa8, 0x23, 0x9f, 0x14, 0xd7, 0x6b, 0x82, 0x3c, 0xf5, 0x0a],
            vector[0xc7, 0x8e, 0x24, 0xb9, 0x51, 0xf6, 0x3a, 0x82, 0x0d, 0x75, 0x1c, 0xe4, 0x9b, 0x37, 0xa0, 0x5f, 0xd2, 0x68, 0x13, 0xf9, 0x4c, 0x85, 0x2b, 0xae, 0x06, 0x7d, 0x31, 0x9a, 0x4e, 0xc5, 0x8f, 0x27],
            vector[0x2a, 0xd5, 0x7f, 0x13, 0x8c, 0x46, 0xb0, 0x59, 0xe2, 0x9a, 0x31, 0xc7, 0x04, 0x6d, 0xf8, 0x25, 0x8e, 0x3b, 0xa4, 0x72, 0x1f, 0xd9, 0x50, 0x97, 0x3e, 0x86, 0x0c, 0xb5, 0x4a, 0x1d, 0xe7, 0x63],
            vector[0x95, 0x1c, 0xe8, 0x42, 0x7b, 0xd3, 0x09, 0xf6, 0x5a, 0x83, 0x2d, 0xb4, 0x6f, 0x17, 0xc0, 0x8e, 0x35, 0x9c, 0x4f, 0xa1, 0x26, 0xd8, 0x70, 0x3b, 0x85, 0x1e, 0xf7, 0x62, 0x9d, 0x04, 0xb8, 0x53],
            vector[0x4e, 0xa7, 0x31, 0xc8, 0x5f, 0x92, 0x0b, 0x74, 0xd6, 0x1e, 0x8a, 0x43, 0xb5, 0x2c, 0xf9, 0x60, 0x87, 0x3d, 0xe5, 0x19, 0x72, 0xab, 0x24, 0x9c, 0x53, 0x0f, 0xd1, 0x48, 0xb6, 0x7a, 0x35, 0xec],
            vector[0xb3, 0x29, 0x8f, 0x56, 0xe0, 0x47, 0xc1, 0x3a, 0x82, 0x0d, 0x75, 0x1c, 0xe4, 0x9b, 0x37, 0xa0, 0x5f, 0xd2, 0x68, 0x13, 0xf9, 0x4c, 0x85, 0x2b, 0xae, 0x06, 0x7d, 0x31, 0x9a, 0x4e, 0xc5, 0x8f],
            vector[0x7a, 0xf4, 0x2d, 0x91, 0x38, 0xc5, 0x0e, 0x67, 0xb2, 0x49, 0x83, 0x1c, 0xd5, 0x6a, 0x04, 0xef, 0x95, 0x2c, 0x7b, 0x13, 0x8f, 0x54, 0xba, 0x31, 0x7e, 0xc5, 0x09, 0xd2, 0x4a, 0x86, 0xf3, 0x5b],
            vector[0x51, 0xe8, 0x72, 0x3f, 0x9c, 0x04, 0xba, 0x25, 0x6d, 0xf1, 0x38, 0x8e, 0x47, 0xa0, 0x13, 0xc9, 0x5e, 0x82, 0x1b, 0xd4, 0x7f, 0x36, 0x9a, 0x0c, 0xe5, 0x28, 0xb3, 0x4f, 0x97, 0x61, 0x0d, 0x8a],
            vector[0xc4, 0x3b, 0x95, 0x0d, 0x72, 0xf8, 0x1e, 0x86, 0x4a, 0xb3, 0x27, 0xd9, 0x5c, 0x01, 0xe4, 0x7b, 0x93, 0x2f, 0xa8, 0x56, 0x0c, 0xd1, 0x48, 0xbf, 0x35, 0x9e, 0x67, 0x12, 0x8d, 0x4c, 0xa5, 0x3e],
            vector[0x08, 0xd4, 0x6b, 0xa2, 0x3f, 0x95, 0x1c, 0xe8, 0x42, 0x7b, 0xd3, 0x09, 0xf6, 0x5a, 0x83, 0x2d, 0xb4, 0x6f, 0x17, 0xc0, 0x8e, 0x35, 0x9c, 0x4f, 0xa1, 0x26, 0xd8, 0x70, 0x3b, 0x85, 0x1e, 0xf7],
            vector[0x83, 0x2a, 0xf5, 0x4c, 0x97, 0x61, 0x0d, 0xb8, 0x35, 0x9e, 0x67, 0x12, 0x8d, 0x4c, 0xa5, 0x3e, 0xf0, 0x79, 0x21, 0xda, 0x56, 0x8f, 0x37, 0xc2, 0x0b, 0x74, 0x1d, 0xe6, 0x92, 0x4f, 0xa8, 0x13],
            vector[0x1f, 0xc7, 0x58, 0xb2, 0x49, 0xe0, 0x26, 0x8d, 0xa3, 0x5f, 0x91, 0x38, 0xd4, 0x0c, 0x7a, 0xe2, 0x6b, 0xf5, 0x13, 0x8c, 0x47, 0xb9, 0x25, 0xd0, 0x84, 0x2b, 0xf6, 0x0d, 0x95, 0x3c, 0xae, 0x71],
            vector[0x94, 0x3d, 0x86, 0x0f, 0x52, 0xca, 0x71, 0x1b, 0xe4, 0x59, 0xa2, 0x27, 0xd0, 0x8b, 0x35, 0xfc, 0x47, 0x9e, 0x63, 0x1a, 0xb5, 0x2c, 0x78, 0xd1, 0x0e, 0x96, 0x4f, 0xa3, 0x5b, 0x82, 0x19, 0xe7],
            vector[0x2e, 0xb7, 0x41, 0xd8, 0x0f, 0x96, 0x53, 0xac, 0x25, 0x7e, 0x14, 0x8b, 0xf2, 0x39, 0xc0, 0x6d, 0xa5, 0x1c, 0x84, 0x3b, 0xe6, 0x5f, 0x92, 0x07, 0xd3, 0x4a, 0xb1, 0x68, 0x2f, 0x95, 0x0c, 0x73],
            vector[0xa9, 0x50, 0x17, 0xe4, 0x6b, 0x23, 0x8c, 0xf5, 0x3a, 0xd1, 0x78, 0x42, 0x9b, 0x0e, 0x85, 0x5c, 0xb3, 0x2a, 0xf7, 0x61, 0x0d, 0x94, 0x3b, 0xc8, 0x56, 0x1f, 0xd2, 0x79, 0x45, 0xac, 0x83, 0x2e],
            vector[0x75, 0x1c, 0xe4, 0x9b, 0x37, 0xa0, 0x5f, 0xd2, 0x68, 0x13, 0xf9, 0x4c, 0x85, 0x2b, 0xae, 0x06, 0x7d, 0x31, 0x9a, 0x4e, 0xc5, 0x8f, 0x27, 0xb3, 0x29, 0x8f, 0x56, 0xe0, 0x47, 0xc1, 0x3a, 0x82],
            vector[0x4d, 0x85, 0x3c, 0xf6, 0x1a, 0xb2, 0x7e, 0x09, 0xd4, 0x5b, 0x83, 0x2c, 0x97, 0x0e, 0x65, 0xac, 0x31, 0xf8, 0x4a, 0xb5, 0x6d, 0x23, 0x89, 0x40, 0xe7, 0x1c, 0xd6, 0x92, 0x58, 0x0f, 0xa4, 0x7b],
            vector[0xb6, 0x2f, 0x98, 0x51, 0xc4, 0x0a, 0x73, 0xe9, 0x1d, 0x86, 0x3f, 0xb5, 0x4c, 0x27, 0x90, 0x5e, 0xd8, 0x12, 0x7f, 0xa3, 0x49, 0xe0, 0x26, 0x8d, 0xb7, 0x54, 0x0c, 0x95, 0x3e, 0x71, 0xf8, 0x2a],
            vector[0x39, 0xe2, 0x57, 0xac, 0x84, 0x1b, 0xd5, 0x6f, 0x03, 0x9a, 0x42, 0xc8, 0x15, 0x7e, 0xb0, 0x29, 0xf4, 0x8d, 0x36, 0xa1, 0x5c, 0x02, 0xeb, 0x74, 0x1d, 0x86, 0x3f, 0xb5, 0x4c, 0x27, 0x90, 0x5e],
            vector[0x0c, 0x95, 0x3e, 0x71, 0xf8, 0x2a, 0xb6, 0x2f, 0x98, 0x51, 0xc4, 0x0a, 0x73, 0xe9, 0x1d, 0x86, 0x3f, 0xb5, 0x4c, 0x27, 0x90, 0x5e, 0xd8, 0x12, 0x7f, 0xa3, 0x49, 0xe0, 0x26, 0x8d, 0xb7, 0x54],
            vector[0x65, 0xac, 0x31, 0xf8, 0x4a, 0xb5, 0x6d, 0x23, 0x89, 0x40, 0xe7, 0x1c, 0xd6, 0x92, 0x58, 0x0f, 0xa4, 0x7b, 0x4d, 0x85, 0x3c, 0xf6, 0x1a, 0xb2, 0x7e, 0x09, 0xd4, 0x5b, 0x83, 0x2c, 0x97, 0x0e],
            vector[0xe2, 0x59, 0xac, 0x84, 0x1b, 0xd5, 0x6f, 0x03, 0x9a, 0x42, 0xc8, 0x15, 0x7e, 0xb0, 0x29, 0xf4, 0x8d, 0x36, 0xa1, 0x5c, 0x02, 0xeb, 0x74, 0x1d, 0x86, 0x3f, 0xb5, 0x4c, 0x27, 0x90, 0x5e, 0x39]
        ];

        let res: vector<u8> = merkle_proof::merkle_root_simple(leaf, proofs);

        let hash_bytes = vector[
            0xb1, 0xd1, 0x4d, 0x6c, 0xff, 0xfd, 0x27, 0x3a,
            0xc7, 0xd9, 0x65, 0xd7, 0xe3, 0xf9, 0x0c, 0x7e,
            0x70, 0xd3, 0xf7, 0x53, 0xb1, 0x0b, 0x0c, 0x7b,
            0xec, 0xb3, 0x68, 0xd9, 0x39, 0x6b, 0xab, 0xeb
        ];
        assert!(res == hash_bytes);
    }
}
