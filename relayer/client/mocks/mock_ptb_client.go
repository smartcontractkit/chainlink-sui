// Code generated by MockGen. DO NOT EDIT.
// Source: ./client/ptb_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	models "github.com/block-vision/sui-go-sdk/models"
	signer "github.com/block-vision/sui-go-sdk/signer"
	sui "github.com/block-vision/sui-go-sdk/sui"
	transaction "github.com/block-vision/sui-go-sdk/transaction"
	client "github.com/smartcontractkit/chainlink-sui/relayer/client"
	gomock "go.uber.org/mock/gomock"
)

// MockSuiPTBClient is a mock of SuiPTBClient interface.
type MockSuiPTBClient struct {
	ctrl     *gomock.Controller
	recorder *MockSuiPTBClientMockRecorder
	isgomock struct{}
}

// MockSuiPTBClientMockRecorder is the mock recorder for MockSuiPTBClient.
type MockSuiPTBClientMockRecorder struct {
	mock *MockSuiPTBClient
}

// NewMockSuiPTBClient creates a new mock instance.
func NewMockSuiPTBClient(ctrl *gomock.Controller) *MockSuiPTBClient {
	mock := &MockSuiPTBClient{ctrl: ctrl}
	mock.recorder = &MockSuiPTBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuiPTBClient) EXPECT() *MockSuiPTBClientMockRecorder {
	return m.recorder
}

// BlockByDigest mocks base method.
func (m *MockSuiPTBClient) BlockByDigest(ctx context.Context, txDigest string) (*client.SuiTransactionBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockByDigest", ctx, txDigest)
	ret0, _ := ret[0].(*client.SuiTransactionBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockByDigest indicates an expected call of BlockByDigest.
func (mr *MockSuiPTBClientMockRecorder) BlockByDigest(ctx, txDigest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockByDigest", reflect.TypeOf((*MockSuiPTBClient)(nil).BlockByDigest), ctx, txDigest)
}

// EstimateGas mocks base method.
func (m *MockSuiPTBClient) EstimateGas(ctx context.Context, txBytes string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, txBytes)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas.
func (mr *MockSuiPTBClientMockRecorder) EstimateGas(ctx, txBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockSuiPTBClient)(nil).EstimateGas), ctx, txBytes)
}

// FinishPTBAndSend mocks base method.
func (m *MockSuiPTBClient) FinishPTBAndSend(ctx context.Context, txnSigner *signer.Signer, tx *transaction.Transaction, requestType client.TransactionRequestType) (client.SuiTransactionBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishPTBAndSend", ctx, txnSigner, tx, requestType)
	ret0, _ := ret[0].(client.SuiTransactionBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishPTBAndSend indicates an expected call of FinishPTBAndSend.
func (mr *MockSuiPTBClientMockRecorder) FinishPTBAndSend(ctx, txnSigner, tx, requestType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishPTBAndSend", reflect.TypeOf((*MockSuiPTBClient)(nil).FinishPTBAndSend), ctx, txnSigner, tx, requestType)
}

// GetClient mocks base method.
func (m *MockSuiPTBClient) GetClient() *sui.ISuiAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*sui.ISuiAPI)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockSuiPTBClientMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockSuiPTBClient)(nil).GetClient))
}

// GetCoinsByAddress mocks base method.
func (m *MockSuiPTBClient) GetCoinsByAddress(ctx context.Context, address string) ([]models.CoinData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinsByAddress", ctx, address)
	ret0, _ := ret[0].([]models.CoinData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinsByAddress indicates an expected call of GetCoinsByAddress.
func (mr *MockSuiPTBClientMockRecorder) GetCoinsByAddress(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinsByAddress", reflect.TypeOf((*MockSuiPTBClient)(nil).GetCoinsByAddress), ctx, address)
}

// GetSUIBalance mocks base method.
func (m *MockSuiPTBClient) GetSUIBalance(ctx context.Context, address string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSUIBalance", ctx, address)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSUIBalance indicates an expected call of GetSUIBalance.
func (mr *MockSuiPTBClientMockRecorder) GetSUIBalance(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSUIBalance", reflect.TypeOf((*MockSuiPTBClient)(nil).GetSUIBalance), ctx, address)
}

// GetTransactionStatus mocks base method.
func (m *MockSuiPTBClient) GetTransactionStatus(ctx context.Context, digest string) (client.TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionStatus", ctx, digest)
	ret0, _ := ret[0].(client.TransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionStatus indicates an expected call of GetTransactionStatus.
func (mr *MockSuiPTBClientMockRecorder) GetTransactionStatus(ctx, digest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionStatus", reflect.TypeOf((*MockSuiPTBClient)(nil).GetTransactionStatus), ctx, digest)
}

// MoveCall mocks base method.
func (m *MockSuiPTBClient) MoveCall(ctx context.Context, req client.MoveCallRequest) (client.TxnMetaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveCall", ctx, req)
	ret0, _ := ret[0].(client.TxnMetaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveCall indicates an expected call of MoveCall.
func (mr *MockSuiPTBClientMockRecorder) MoveCall(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCall", reflect.TypeOf((*MockSuiPTBClient)(nil).MoveCall), ctx, req)
}

// QueryEvents mocks base method.
func (m *MockSuiPTBClient) QueryEvents(ctx context.Context, filter client.EventFilterByMoveEventModule, limit *uint, cursor *client.EventId, sortOptions *client.QuerySortOptions) (*models.PaginatedEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryEvents", ctx, filter, limit, cursor, sortOptions)
	ret0, _ := ret[0].(*models.PaginatedEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryEvents indicates an expected call of QueryEvents.
func (mr *MockSuiPTBClientMockRecorder) QueryEvents(ctx, filter, limit, cursor, sortOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryEvents", reflect.TypeOf((*MockSuiPTBClient)(nil).QueryEvents), ctx, filter, limit, cursor, sortOptions)
}

// ReadFilterOwnedObjectIds mocks base method.
func (m *MockSuiPTBClient) ReadFilterOwnedObjectIds(ctx context.Context, ownerAddress, structType string, limit *uint) ([]models.SuiObjectData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFilterOwnedObjectIds", ctx, ownerAddress, structType, limit)
	ret0, _ := ret[0].([]models.SuiObjectData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFilterOwnedObjectIds indicates an expected call of ReadFilterOwnedObjectIds.
func (mr *MockSuiPTBClientMockRecorder) ReadFilterOwnedObjectIds(ctx, ownerAddress, structType, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFilterOwnedObjectIds", reflect.TypeOf((*MockSuiPTBClient)(nil).ReadFilterOwnedObjectIds), ctx, ownerAddress, structType, limit)
}

// ReadFunction mocks base method.
func (m *MockSuiPTBClient) ReadFunction(ctx context.Context, signerAddress, packageId, module, function string, args []any, argTypes []string) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFunction", ctx, signerAddress, packageId, module, function, args, argTypes)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFunction indicates an expected call of ReadFunction.
func (mr *MockSuiPTBClientMockRecorder) ReadFunction(ctx, signerAddress, packageId, module, function, args, argTypes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFunction", reflect.TypeOf((*MockSuiPTBClient)(nil).ReadFunction), ctx, signerAddress, packageId, module, function, args, argTypes)
}

// ReadObjectId mocks base method.
func (m *MockSuiPTBClient) ReadObjectId(ctx context.Context, objectId string) (models.SuiObjectData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadObjectId", ctx, objectId)
	ret0, _ := ret[0].(models.SuiObjectData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadObjectId indicates an expected call of ReadObjectId.
func (mr *MockSuiPTBClientMockRecorder) ReadObjectId(ctx, objectId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadObjectId", reflect.TypeOf((*MockSuiPTBClient)(nil).ReadObjectId), ctx, objectId)
}

// ReadOwnedObjects mocks base method.
func (m *MockSuiPTBClient) ReadOwnedObjects(ctx context.Context, ownerAddress string, cursor *models.ObjectId) ([]models.SuiObjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOwnedObjects", ctx, ownerAddress, cursor)
	ret0, _ := ret[0].([]models.SuiObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOwnedObjects indicates an expected call of ReadOwnedObjects.
func (mr *MockSuiPTBClientMockRecorder) ReadOwnedObjects(ctx, ownerAddress, cursor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOwnedObjects", reflect.TypeOf((*MockSuiPTBClient)(nil).ReadOwnedObjects), ctx, ownerAddress, cursor)
}

// SendTransaction mocks base method.
func (m *MockSuiPTBClient) SendTransaction(ctx context.Context, payload client.TransactionBlockRequest) (client.SuiTransactionBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, payload)
	ret0, _ := ret[0].(client.SuiTransactionBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockSuiPTBClientMockRecorder) SendTransaction(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockSuiPTBClient)(nil).SendTransaction), ctx, payload)
}

// SignAndSendTransaction mocks base method.
func (m *MockSuiPTBClient) SignAndSendTransaction(ctx context.Context, txBytesRaw string, signerPublicKey []byte, executionRequestType client.TransactionRequestType) (client.SuiTransactionBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignAndSendTransaction", ctx, txBytesRaw, signerPublicKey, executionRequestType)
	ret0, _ := ret[0].(client.SuiTransactionBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignAndSendTransaction indicates an expected call of SignAndSendTransaction.
func (mr *MockSuiPTBClientMockRecorder) SignAndSendTransaction(ctx, txBytesRaw, signerPublicKey, executionRequestType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignAndSendTransaction", reflect.TypeOf((*MockSuiPTBClient)(nil).SignAndSendTransaction), ctx, txBytesRaw, signerPublicKey, executionRequestType)
}
